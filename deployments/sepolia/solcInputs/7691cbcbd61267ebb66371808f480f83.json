{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// solhint-disable-next-line interface-starts-with-i\ninterface AggregatorInterface {\n  function latestAnswer() external view returns (int256);\n\n  function latestTimestamp() external view returns (uint256);\n\n  function latestRound() external view returns (uint256);\n\n  function getAnswer(uint256 roundId) external view returns (int256);\n\n  function getTimestamp(uint256 roundId) external view returns (uint256);\n\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\n\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\n}\n"
    },
    "@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV2V3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {AggregatorInterface} from \"./AggregatorInterface.sol\";\nimport {AggregatorV3Interface} from \"./AggregatorV3Interface.sol\";\n\n// solhint-disable-next-line interface-starts-with-i\ninterface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface {}\n"
    },
    "@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// solhint-disable-next-line interface-starts-with-i\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(\n    uint80 _roundId\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n  function latestRoundData()\n    external\n    view\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"
    },
    "@chainlink/contracts/src/v0.8/tests/MockV3Aggregator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"../shared/interfaces/AggregatorV2V3Interface.sol\";\n\n/**\n * @title MockV3Aggregator\n * @notice Based on the FluxAggregator contract\n * @notice Use this contract when you need to test\n * other contract's ability to read data from an\n * aggregator contract, but how the aggregator got\n * its answer is unimportant\n */\ncontract MockV3Aggregator is AggregatorV2V3Interface {\n  uint256 public constant override version = 0;\n\n  uint8 public override decimals;\n  int256 public override latestAnswer;\n  uint256 public override latestTimestamp;\n  uint256 public override latestRound;\n\n  mapping(uint256 => int256) public override getAnswer;\n  mapping(uint256 => uint256) public override getTimestamp;\n  mapping(uint256 => uint256) private getStartedAt;\n\n  constructor(uint8 _decimals, int256 _initialAnswer) {\n    decimals = _decimals;\n    updateAnswer(_initialAnswer);\n  }\n\n  function updateAnswer(int256 _answer) public {\n    latestAnswer = _answer;\n    latestTimestamp = block.timestamp;\n    latestRound++;\n    getAnswer[latestRound] = _answer;\n    getTimestamp[latestRound] = block.timestamp;\n    getStartedAt[latestRound] = block.timestamp;\n  }\n\n  function updateRoundData(uint80 _roundId, int256 _answer, uint256 _timestamp, uint256 _startedAt) public {\n    latestRound = _roundId;\n    latestAnswer = _answer;\n    latestTimestamp = _timestamp;\n    getAnswer[latestRound] = _answer;\n    getTimestamp[latestRound] = _timestamp;\n    getStartedAt[latestRound] = _startedAt;\n  }\n\n  function getRoundData(\n    uint80 _roundId\n  )\n    external\n    view\n    override\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound)\n  {\n    return (_roundId, getAnswer[_roundId], getStartedAt[_roundId], getTimestamp[_roundId], _roundId);\n  }\n\n  function latestRoundData()\n    external\n    view\n    override\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound)\n  {\n    return (\n      uint80(latestRound),\n      getAnswer[latestRound],\n      getStartedAt[latestRound],\n      getTimestamp[latestRound],\n      uint80(latestRound)\n    );\n  }\n\n  function description() external pure override returns (string memory) {\n    return \"v0.8/tests/MockV3Aggregator.sol\";\n  }\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\nimport {AggregatorV3Interface} from \"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\";\n\n// 1. 创建一个收款函数\n// 2. 记录投资人并且查看\n// 3. 在锁定期内，达到目标值，生产商可以提款\n// 4. 在锁定期内，没有达到目标值，投资人在锁定期以后退款\ncontract FundMe{\n\n    AggregatorV3Interface public dataFeed;\n    mapping(address => uint256) public fundersToAmount;\n    //每次最小为100美元\n    uint256 constant  MININUM_VALUE = 100 * 10 ** 18; \n    //总额为1000美元\n    uint256 constant  TARGET = 1000 * 10 ** 18; \n    address public owner;\n    bool public success;\n    uint256 public deploymentTimestamp;\n    uint256 public lockTime;\n\n    //ERC-20\n    address erc20Addr;\n\n    //getFund结束标志\n    bool public getFundSuccess =  false;\n\n    event FundWithdrawByOwner(uint256);\n    event ReFundByFunder(address,uint256);\n\n    constructor(uint256 _lockTime, address dataFeedAddr){\n        owner = msg.sender;\n        //sepolia testnet ETH/USD\n        //0x694AA1769357215DE4FAC081bf1f309aDC325306\n        dataFeed = AggregatorV3Interface(dataFeedAddr);\n        deploymentTimestamp = block.timestamp;\n        lockTime= _lockTime;\n\n    } \n    function fund() external payable{\n        require(convertEthToUsd(msg.value) >= MININUM_VALUE,\"Send more ETH\");\n        require(block.timestamp < deploymentTimestamp + lockTime,\"window is closed\");\n        fundersToAmount[msg.sender] = msg.value; \n    }\n    /**\n     * Returns the latest answer.\n     */\n    function getChainlinkDataFeedLatestAnswer() public view returns (int) {\n        // prettier-ignore\n        (\n            /* uint80 roundID */,\n            int answer,\n            /*uint startedAt*/,\n            /*uint timeStamp*/,\n            /*uint80 answeredInRound*/\n        ) = dataFeed.latestRoundData();\n        return answer;\n    }\n    function convertEthToUsd(uint256 ethAmount) internal view returns(uint256){\n        uint256 ethPrice = uint256(getChainlinkDataFeedLatestAnswer());\n        return ethAmount * ethPrice / (10 ** 8);\n    }\n    function getFund() external windowClosed onlyOwner{\n        \n        require(convertEthToUsd(address(this).balance) >= TARGET,\"Target is not reached\");\n        //提款\n        //1.transfer\n        //payable(msg.sender).transfer(address(this).balance);\n        //2.send\n        //success = payable(msg.sender).send(address(this).balance);\n        //require(success,\"transfer failed\");\n        //3.call\n\n        uint256 balance = address(this).balance;\n        (success,) = payable(msg.sender).call{value: balance}(\"\");\n        require(success,\"transfer failed\");\n        getFundSuccess = true;\n\n        emit FundWithdrawByOwner(balance);\n\n    }\n    function transferOwnership(address newOwner) public onlyOwner{\n        owner = newOwner;\n    }\n\n    function reFund() external windowClosed{\n        //总金额没有达到要求\n        require(convertEthToUsd(address(this).balance) < TARGET,\"Target is reached\");\n        //请求退款的人必须是捐助者\n        require(fundersToAmount[msg.sender] > 0,\"There is no fund for you\");\n        bool reFundSuccess;\n        uint256 balance = fundersToAmount[msg.sender];\n        (reFundSuccess,) = payable(msg.sender).call{value:balance}(\"\");\n        require(reFundSuccess,\"transfer failed\");\n        fundersToAmount[msg.sender] = 0;\n        emit ReFundByFunder(msg.sender,balance);\n    }\n    //修改funder对应的ETH数量\n    function setFunderToAmount (address funder,uint256 amountToUpdate) external {\n        require(msg.sender == erc20Addr,\"you do not have permission to call this function\");\n        fundersToAmount[funder]= amountToUpdate;\n    }\n    //设置ERC20合约地址\n    function setErc20Addr(address _erc20Addr) public onlyOwner {\n        erc20Addr =_erc20Addr;\n    }\n\n    modifier windowClosed(){\n        require(block.timestamp > deploymentTimestamp + lockTime,\"window is not closed\");\n        _;\n    } \n    modifier onlyOwner(){\n        require(msg.sender == owner,\"this function can only be called by owner\");\n        _;\n    }\n\n}"
    },
    "contracts/mocks/MockV3Aggregator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\nimport \"@chainlink/contracts/src/v0.8/tests/MockV3Aggregator.sol\";"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}